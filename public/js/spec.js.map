{"version":3,"sources":["utils.js","Strings.js","Collection.js","Events.js","Box.js","Promise.js","Ajax.js","Associator.js","DOMM.js","View.js","Buster.js"],"names":[],"mappingsfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzrarzcfile":"spec.js","sourcesContent":["application.scope().run(function (app, _, $) {\n    var factories = _.factories;\n    describe('var _ = app._;', function () {\n        var baseString = 'my string is a great string',\n            specialString = 'here&are*a ()lot o~/f special_+characters',\n            makeArray = function () {\n                return baseString.split(' ');\n            };\n        // describe('base string methods', function () {\n        //     it('_.split', function () {\n        //         var myString = 'my string is a great string';\n        //         expect(_.split(myString, ' ')).toEqual(myString.split(' '));\n        //     });\n        //     // test slice\n        //     it('_.slice', function () {\n        //         var actual = [1, 2, 3, 4, 5].join('');\n        //         expect(_.slice(actual, 0)).toEqual(actual.slice(0));\n        //     });\n        // });\n        describe('base array methods', function () {\n            it('_.listSlice', function () {\n                var actual = [1, 2, 3, 4, 5];\n                expect(_.listSlice(actual, 0)).toEqual(actual.slice(0));\n            });\n            it('_.join', function () {\n                var myList = baseString.split(' ');\n                expect(_.join(myList, ' ')).toEqual(myList.join(' '));\n            });\n            it('_.pop', function () {\n                expect(_.pop(baseString.split(' '))).toEqual(baseString.split(' ').pop());\n            });\n            it('_.push', function () {\n                expect(_.push(baseString.split(' '), 'string')).toEqual(baseString.split(' ').push('string'));\n            });\n            // it('_.listHas', function () {\n            //     var list = ['list', 2, 1, null];\n            //     expect(_.listHas(list, 1)).toEqual(true);\n            //     expect(_.listHas(list, 'list')).toEqual(true);\n            //     expect(_.listHas(list, {})).toEqual(false);\n            //     expect(_.listHas(list, void 0)).toEqual(false);\n            // });\n            it('_.shift', function () {\n                expect(_.shift(baseString.split(' '))).toEqual(baseString.split(' ').shift());\n            });\n            it('_.indexOf', function () {\n                expect(_.indexOf(makeArray(), 'is')).toEqual(makeArray().indexOf('is'));\n            });\n            it('_.splice', function () {\n                var actual = [1, 2, 3, 4, 5];\n                expect(_.listSlice(actual, 2)).toEqual(actual.slice(2));\n            });\n            it('_.sort', function () {\n                expect(_.sort(makeArray())).toEqual(makeArray().sort());\n            });\n            it('_.reverse', function () {\n                expect(_.reverse(makeArray())).toEqual(makeArray().reverse());\n            });\n        });\n        describe('base object methods', function () {\n            it('_.has', function () {\n                var baseObj = {\n                    one: null\n                };\n                expect(_.has(baseObj, 'one')).toEqual(baseObj.hasOwnProperty('one'));\n            });\n            it('_.splitGen', function () {\n                var ampSplit = _.splitGen('&'),\n                    qSplit = _.splitGen('?');\n                expect(ampSplit(baseString)).toEqual(baseString.split('&'));\n                expect(ampSplit(specialString)).toEqual(specialString.split('&'));\n                expect(qSplit(baseString)).toEqual(baseString.split('?'));\n                expect(qSplit(specialString)).toEqual(specialString.split('?'));\n            });\n            it('_.joinGen', function () {\n                var ampJoin = _.joinGen('&'),\n                    qJoin = _.joinGen('?'),\n                    baseArray = baseString.split(' '),\n                    specialArray = baseString.split(' ');\n                expect(ampJoin(baseArray)).toEqual(baseArray.join('&'));\n                expect(ampJoin(specialArray)).toEqual(specialArray.join('&'));\n                expect(qJoin(baseArray)).toEqual(baseArray.join('?'));\n                expect(qJoin(specialArray)).toEqual(specialArray.join('?'));\n            });\n            it('_.gapJoin', function () {\n                var baseArray = baseString.split(' '),\n                    specialArray = baseString.split(' ');\n                expect(_.gapJoin(baseArray)).toEqual(baseArray.join(' '));\n                expect(_.gapJoin(specialArray)).toEqual(specialArray.join(' '));\n            });\n            it('_.gapSplit', function () {\n                expect(_.gapSplit(baseString)).toEqual(baseString.split(' '));\n                expect(_.gapSplit(specialString)).toEqual(specialString.split(' '));\n            });\n            it('_.isFunction', function () {\n                expect(_.isFunction(true)).toEqual(false);\n                expect(_.isFunction(false)).toEqual(false);\n                expect(_.isFunction(1)).toEqual(false);\n                expect(_.isFunction(0)).toEqual(false);\n                expect(_.isFunction(Infinity)).toEqual(false);\n                expect(_.isFunction(NaN)).toEqual(false);\n                expect(_.isFunction(null)).toEqual(false);\n                expect(_.isFunction(undefined)).toEqual(false);\n                expect(_.isFunction('')).toEqual(false);\n                expect(_.isFunction(baseString)).toEqual(false);\n                expect(_.isFunction([])).toEqual(false);\n                expect(_.isFunction({})).toEqual(false);\n                expect(_.isFunction(window)).toEqual(false);\n                expect(_.isFunction(function () {})).toEqual(true);\n            });\n            it('_.isBoolean', function () {\n                expect(_.isBoolean(true)).toEqual(true);\n                expect(_.isBoolean(false)).toEqual(true);\n                expect(_.isBoolean(1)).toEqual(false);\n                expect(_.isBoolean(0)).toEqual(false);\n                expect(_.isBoolean(Infinity)).toEqual(false);\n                expect(_.isBoolean(NaN)).toEqual(false);\n                expect(_.isBoolean(null)).toEqual(false);\n                expect(_.isBoolean(undefined)).toEqual(false);\n                expect(_.isBoolean('')).toEqual(false);\n                expect(_.isBoolean(baseString)).toEqual(false);\n                expect(_.isBoolean([])).toEqual(false);\n                expect(_.isBoolean({})).toEqual(false);\n                expect(_.isBoolean(window)).toEqual(false);\n                expect(_.isBoolean(function () {})).toEqual(false);\n            });\n            it('_.isString', function () {\n                expect(_.isString(true)).toEqual(false);\n                expect(_.isString(false)).toEqual(false);\n                expect(_.isString(1)).toEqual(false);\n                expect(_.isString(0)).toEqual(false);\n                expect(_.isString(Infinity)).toEqual(false);\n                expect(_.isString(NaN)).toEqual(false);\n                expect(_.isString(null)).toEqual(false);\n                expect(_.isString(undefined)).toEqual(false);\n                expect(_.isString('')).toEqual(true);\n                expect(_.isString(baseString)).toEqual(true);\n                expect(_.isString([])).toEqual(false);\n                expect(_.isString({})).toEqual(false);\n                expect(_.isString(window)).toEqual(false);\n                expect(_.isString(function () {})).toEqual(false);\n            });\n            it('_.isNumber', function () {\n                expect(_.isNumber(true)).toEqual(false);\n                expect(_.isNumber(false)).toEqual(false);\n                expect(_.isNumber(1)).toEqual(true);\n                expect(_.isNumber(0)).toEqual(true);\n                expect(_.isNumber(Infinity)).toEqual(true);\n                expect(_.isNumber(NaN)).toEqual(false);\n                expect(_.isNumber(null)).toEqual(false);\n                expect(_.isNumber(undefined)).toEqual(false);\n                expect(_.isNumber('')).toEqual(false);\n                expect(_.isNumber(baseString)).toEqual(false);\n                expect(_.isNumber([])).toEqual(false);\n                expect(_.isNumber({})).toEqual(false);\n                expect(_.isNumber(window)).toEqual(false);\n                expect(_.isNumber(function () {})).toEqual(false);\n            });\n            it('_.isObject', function () {\n                expect(_.isObject(true)).toEqual(false);\n                expect(_.isObject(false)).toEqual(false);\n                expect(_.isObject(1)).toEqual(false);\n                expect(_.isObject(0)).toEqual(false);\n                expect(_.isObject(Infinity)).toEqual(false);\n                expect(_.isObject(NaN)).toEqual(false);\n                expect(_.isObject(null)).toEqual(false);\n                expect(_.isObject(undefined)).toEqual(false);\n                expect(_.isObject('')).toEqual(false);\n                expect(_.isObject(baseString)).toEqual(false);\n                expect(_.isObject([])).toEqual(true);\n                expect(_.isObject({})).toEqual(true);\n                expect(_.isObject(window)).toEqual(true);\n                expect(_.isObject(function () {})).toEqual(false);\n            });\n            it('_.isArray', function () {\n                expect(_.isArray(true)).toEqual(false);\n                expect(_.isArray(false)).toEqual(false);\n                expect(_.isArray(1)).toEqual(false);\n                expect(_.isArray(0)).toEqual(false);\n                expect(_.isArray(Infinity)).toEqual(false);\n                expect(_.isArray(NaN)).toEqual(false);\n                expect(_.isArray(null)).toEqual(false);\n                expect(_.isArray(undefined)).toEqual(false);\n                expect(_.isArray('')).toEqual(false);\n                expect(_.isArray(baseString)).toEqual(false);\n                expect(_.isArray([])).toEqual(true);\n                expect(_.isArray({})).toEqual(false);\n                expect(_.isArray(window)).toEqual(false);\n                expect(_.isArray(function () {})).toEqual(false);\n            });\n            it('_.isEmpty', function () {\n                expect(_.isEmpty(true)).toEqual(true);\n                expect(_.isEmpty(false)).toEqual(true);\n                expect(_.isEmpty(1)).toEqual(true);\n                expect(_.isEmpty(0)).toEqual(true);\n                expect(_.isEmpty(Infinity)).toEqual(true);\n                expect(_.isEmpty(NaN)).toEqual(true);\n                expect(_.isEmpty(null)).toEqual(true);\n                expect(_.isEmpty(undefined)).toEqual(true);\n                expect(_.isEmpty('')).toEqual(true);\n                expect(_.isEmpty(baseString)).toEqual(true);\n                expect(_.isEmpty([])).toEqual(true);\n                expect(_.isEmpty({})).toEqual(true);\n                expect(_.isEmpty(window)).toEqual(false);\n                expect(_.isEmpty(function () {})).toEqual(true);\n                expect(_.isEmpty([1])).toEqual(false);\n                expect(_.isEmpty({\n                    one: 1\n                })).toEqual(false);\n            });\n            it('_.isInstance', function () {\n                var obj = {},\n                    newBox = _.Box();\n                expect(_.isInstance(obj, Object)).toEqual(true);\n                expect(_.isInstance(newBox, factories.Box)).toEqual(true);\n                expect(_.isInstance(newBox, _.Box)).toEqual(true);\n                expect(_.isInstance(newBox, _.Collection)).toEqual(false);\n            });\n            it('_.negate', function () {\n                var falsey = _.negate(function () {\n                        return false;\n                    }),\n                    truthy = _.negate(function () {\n                        return true;\n                    });\n                expect(truthy()).toEqual(false);\n                expect(falsey()).toEqual(true);\n            });\n            it('_.invert', function () {\n                expect(_.invert({\n                    one: 1,\n                    two: 2\n                })).toEqual({\n                    '1': 'one',\n                    '2': 'two'\n                });\n            });\n            it('_.stringify', function () {\n                expect(_.stringify({})).toEqual(JSON.stringify({}));\n                expect(_.stringify({})).not.toEqual({}.toString());\n                expect(_.stringify(function () {})).toEqual(function () {}.toString());\n            });\n            it('_.extend', function () {\n                expect(_.extend({\n                    four: 1,\n                    three: 3\n                }, {\n                    two: 3,\n                    three: 2\n                }, {\n                    one: 4\n                })).toEqual({\n                    four: 1,\n                    two: 3,\n                    three: 2,\n                    one: 4\n                });\n                expect(_.extend(!0, {\n                    some: {}\n                }, {\n                    some: {\n                        where: 'across the sea'\n                    }\n                }, {\n                    some: {}\n                }, {\n                    some: {\n                        one: 'is waiting for me'\n                    }\n                })).toEqual({\n                    some: {\n                        where: 'across the sea',\n                        one: 'is waiting for me'\n                    }\n                });\n                expect(_.extend({\n                    some: {}\n                }, {\n                    some: {\n                        where: 'across the sea'\n                    }\n                }, {\n                    some: {}\n                }, {\n                    some: {\n                        one: 'is waiting for me'\n                    }\n                })).toEqual({\n                    some: {\n                        one: 'is waiting for me'\n                    }\n                });\n            });\n            it('_.merge', function () {\n                // modifies the original object\n                expect(_.merge({\n                    one: {\n                        two: {\n                            three: 4\n                        }\n                    }\n                }, {\n                    one: {},\n                    two: 2\n                })).toEqual({\n                    one: {},\n                    two: 2\n                });\n            });\n            it('_.isArrayLike', function () {\n                expect(_.isArrayLike('')).toEqual(false);\n                expect(_.isArrayLike([])).toEqual(true);\n                expect(_.isArrayLike({\n                    '0': 0,\n                    '1': 1,\n                    length: 2,\n                    splice: function () {}\n                })).toEqual(true);\n            });\n            it('_.each', function () {\n                var args = [],\n                    obj = {\n                        one: 1,\n                        two: 2,\n                        three: 3\n                    };\n                _.each(obj, function (item, idx, iteratingObj) {\n                    args.push([item, idx, iteratingObj]);\n                });\n                expect(args).toEqual([\n                    [1, 'one', obj],\n                    [2, 'two', obj],\n                    [3, 'three', obj]\n                ]);\n                args = [];\n                obj = ['one', 'two', 'three'];\n                _.each(obj, function (val, idx, o) {\n                    args.push([val, idx, o]);\n                });\n                expect(args).toEqual([\n                    ['one', 0, obj],\n                    ['two', 1, obj],\n                    ['three', 2, obj]\n                ]);\n            });\n            it('_.parseBool', function () {\n                expect(_.parseBool('truth')).toEqual('truth');\n                expect(_.parseBool('true')).toEqual(true);\n                expect(_.parseBool('falsey')).toEqual('falsey');\n                expect(_.parseBool('false')).toEqual(false);\n                expect(_.parseBool({})).toEqual({});\n            });\n            it('_.once', function () {\n                var count = 0,\n                    counted = 0,\n                    counter = _.once(function () {\n                        counted++;\n                    });\n                while (count < 10) {\n                    counter();\n                    count++;\n                }\n                expect(counted).toEqual(1);\n            });\n            it('_.isEqual', function () {\n                expect(_.isEqual({\n                    one: {\n                        one: [1, 2, 4, 5]\n                    }\n                }, {\n                    one: {\n                        one: [1, 2, 4, 5]\n                    }\n                })).toEqual(true);\n            });\n            it('_.clone', function () {\n                var original = {\n                        some: 'thing',\n                        out: 'there'\n                    },\n                    cloned = _.clone(original);\n                expect(cloned).toEqual(original);\n            });\n            // write more differentiating code for this test\n            it('_.fullClone', function () {\n                var original = {\n                        some: 'thing',\n                        out: 'there'\n                    },\n                    cloned = _.fullClone(original);\n                expect(cloned).toEqual(original);\n            });\n            it('_.wrap', function () {\n                expect(_.wrap(['some', 'where'], function (val) {\n                    return !val.indexOf('s');\n                })).toEqual({\n                    some: true,\n                    where: false\n                });\n                expect(_.wrap({\n                    click: '0event',\n                    hover: '1event'\n                }, function (val, eventName) {\n                    return !val.indexOf('0');\n                })).toEqual({\n                    click: true,\n                    hover: false\n                });\n            });\n            it('_.unshift', function () {\n                var make = function () {\n                    return [1, 2, 3, 4, 5, 6];\n                };\n                expect(_.unshift(make(), 0)).toEqual(make().unshift(0));\n            });\n            // write async test\n            it('_.fetch', function () {\n                var img = _.fetch('https://app.gospecless.com/favicon.ico');\n                expect(img instanceof Image).toEqual(true);\n            });\n            // it('_.returnBuild', function () {\n            //     expect(_.returnBuild({\n            //         some: {\n            //             where: {\n            //                 only: {\n            //                     we: {\n            //                         know: {\n            //                             by: 'keane'\n            //                         }\n            //                     }\n            //                 }\n            //             }\n            //         }\n            //     }, 'some where only we know', [{}, {}, {}, {}, {}])).toEqual({\n            //         by: 'keane'\n            //     });\n            //     expect(_.returnBuild({\n            //         some: {\n            //             where: {\n            //                 only: {\n            //                     we: {\n            //                         know: {\n            //                             by: 'keane'\n            //                         }\n            //                     }\n            //                 }\n            //             }\n            //         }\n            //     }, 'some where here', [{}, {}, {}])).toEqual({});\n            // });\n            it('_.parse', function () {\n                expect(_.parse('{\"some\":1,\"one\":true}')).toEqual({\n                    some: 1,\n                    one: true\n                });\n                expect(_.parse({\n                    some: 1,\n                    one: true\n                })).toEqual({\n                    some: 1,\n                    one: true\n                });\n            });\n            it('_.units', function () {\n                expect(_.units('')).toEqual(false);\n                expect(_.units(500)).toEqual(false);\n                expect(_.units('500')).toEqual(false);\n                expect(_.units('500px')).toEqual('px');\n                expect(_.units('500rem')).toEqual('rem');\n                expect(_.units('500em')).toEqual('em');\n                expect(_.units('500%')).toEqual('%');\n                expect(_.units('500ex')).toEqual('ex');\n                expect(_.units('500in')).toEqual('in');\n                expect(_.units('500cm')).toEqual('cm');\n                expect(_.units('500vh')).toEqual('vh');\n                expect(_.units('500vw')).toEqual('vw');\n                expect(_.units('500pc')).toEqual('pc');\n                expect(_.units('500pt')).toEqual('pt');\n                expect(_.units('500mm')).toEqual('mm');\n            });\n            it('_.stringifyQuery', function () {\n                expect(_.stringifyQuery({\n                    url: '//google.com',\n                    query: {\n                        some: 'where',\n                        und: 'efined',\n                        // undefined as a string\n                        blank: 'undefined',\n                        // undefined as the value\n                        thisIs: void 0,\n                        under: 'statement',\n                        one: 1,\n                        has: false,\n                        nully: null,\n                        even: {\n                            moar: 'things'\n                        }\n                    }\n                })).toEqual('//google.com?some=where&und=efined&blank=undefined&under=statement&one=1&has=false&nully=null&even=%7B%22moar%22%3A%22things%22%7D');\n            });\n            it('_.protoProp', function () {\n                var box = _.Box();\n                box.idAttribute = 'something';\n                expect(_.protoProp(box, 'idAttribute')).toEqual(factories.Box.constructor.prototype.idAttribute);\n            });\n            it('_.roundFloat', function () {\n                expect(_.roundFloat(1.5489909, 3)).toEqual(1.548);\n            });\n        });\n    });\n});","application.scope().run(function (app, _) {\n    describe('Strings', function () {\n        it('_.camelCase', function () {\n            var thatIsCamelCased = 'thisIsCamelCased';\n            // default delimiter is -\n            expect(_.camelCase('this-is-camel-cased')).toEqual(thatIsCamelCased);\n            expect(_.camelCase('thisIsCamelCased')).toEqual(thatIsCamelCased);\n            // overridable by second param\n            expect(_.camelCase('this_is_camel_cased', '_')).toEqual(thatIsCamelCased);\n            expect(_.camelCase('this is camel cased', ' ')).toEqual(thatIsCamelCased);\n            // does not modify the first character if it is passed in as a capital letter\n            expect(_.camelCase('This Is Camel Cased', ' ')).not.toEqual(thatIsCamelCased);\n        });\n        it('_.upCase', function () {\n            expect(_.upCase('some')).toEqual('Some');\n            expect(_.upCase('Some')).toEqual('Some');\n            expect(_.upCase('sOmE')).toEqual('SOmE');\n        });\n        it('_.unCamelCase', function () {\n            var thatIsCamelCased = 'thisIsUnCamelCased';\n            expect(_.unCamelCase(thatIsCamelCased)).toEqual('this-is-un-camel-cased');\n            expect(_.unCamelCase(thatIsCamelCased, ' ')).toEqual('this is un camel cased');\n            expect(_.unCamelCase(thatIsCamelCased, '_')).toEqual('this_is_un_camel_cased');\n            expect(_.unCamelCase(thatIsCamelCased, '1')).toEqual('this1is1un1camel1cased');\n        });\n    });\n});","application.scope().run(function (app, _, $) {\n    var factories = _.factories;\n    describe('Collection', function () {\n        var collection, numberCollection, complexCollection, evenNumberList;\n        beforeEach(function () {\n            collection = _.Collection();\n            numberCollection = _.Collection([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n            complexCollection = _.Collection([_.Box(), _.Box({\n                one: 1,\n                two: 2,\n                three: 3\n            })]);\n            evenNumberList = [0, 2, 4, 6, 8];\n        });\n        it('extends from factories.Model', function () {\n            expect(_.isInstance(collection, factories.Model)).toEqual(true);\n        });\n        it('extends from factories.Collection', function () {\n            expect(_.isInstance(collection, factories.Collection)).toEqual(true);\n        });\n        it('has an array at _items', function () {\n            expect(_.isArray(collection._items)).toEqual(true);\n        });\n        it('is not an array like object', function () {\n            expect(_.isArrayLike(collection)).toEqual(false);\n        });\n        it('knows it\\'s length', function () {\n            expect(numberCollection.length()).toEqual(10);\n        });\n        it('can give you all of it\\'s values at once', function () {\n            expect(collection.unwrap()).toEqual(collection._items);\n        });\n        it('or one at a time', function () {\n            numberCollection.duff(function (item, idx) {\n                expect(numberCollection.index(idx)).toEqual(numberCollection._items[idx]);\n            });\n        });\n        it('as well as in reverse order', function () {\n            var list = [];\n            numberCollection.duffRev(function (item, idx) {\n                expect(numberCollection.index(idx)).toEqual(numberCollection._items[idx]);\n                list.push(item);\n            });\n            expect(list).toEqual([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n        });\n        it('can trigger toJSON on children', function () {\n            expect(JSON.stringify(numberCollection)).toEqual('[0,1,2,3,4,5,6,7,8,9]');\n            expect(JSON.stringify(complexCollection)).toEqual('[{},{\"one\":1,\"two\":2,\"three\":3}]');\n        });\n        it('can also concatonate itself with collections and arrays just like a regular array', function () {\n            var collection = _.Collection([0, 1, 2, 3, 4]),\n                list = _.Collection([5, 6, 7, 8, 9]);\n            expect(collection.concat(list, evenNumberList).unwrap()).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 2, 4, 6, 8]);\n        });\n        it('can also reverse itself momentarily', function () {\n            var test = [];\n            numberCollection.mambo(function (list) {\n                list.duff(function (val) {\n                    test.push(val);\n                });\n            });\n            expect(test).toEqual([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n        });\n        describe('but other methods need arrays... Collections also have a bunch of methods that they stole from the _ object such as:', function () {\n            it('addAll', function () {\n                expect(numberCollection.addAll([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]).unwrap()).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20]);\n            });\n            it('removeAll', function () {\n                expect(numberCollection.removeAll([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]).unwrap()).toEqual([1, 3, 5, 7, 9]);\n            });\n            it('sort', function () {\n                expect(numberCollection.sort().unwrap()).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n                expect(numberCollection.sort(function (a, b) {\n                    return (a % 3) - (b % 3);\n                }).unwrap()).toEqual([0, 3, 6, 9, 1, 4, 7, 2, 5, 8]);\n            });\n            it('unshift', function () {\n                expect(numberCollection.unshift(-1).unwrap()).toEqual([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n            });\n            it('push', function () {\n                expect(numberCollection.push(10).unwrap()).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n                expect(numberCollection.push(11, 12, 13).unwrap()).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\n            });\n            it('cycle', function () {\n                expect(numberCollection.cycle(3).unwrap()).toEqual([3, 4, 5, 6, 7, 8, 9, 0, 1, 2]);\n            });\n            it('uncycle', function () {\n                expect(numberCollection.uncycle(3).unwrap()).toEqual([7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);\n            });\n            it('count', function () {\n                expect(numberCollection.count(10, 20, function (item, idx, list) {\n                    if (item === null) {\n                        list.push(idx);\n                    }\n                }).length()).toEqual(20);\n            });\n            it('countTo', function () {\n                expect(numberCollection.countTo(20, function (item, idx, list) {\n                    if (item === null) {\n                        list.push(idx);\n                    }\n                }).length()).toEqual(20);\n            });\n            it('countFrom', function () {\n                var count = 0;\n                numberCollection.countFrom(6, function (item, idx, list) {\n                    count++;\n                });\n                expect(count).toEqual(4);\n            });\n            it('has', function () {\n                expect(numberCollection.has('25')).toEqual(false);\n                expect(numberCollection.has('3')).toEqual(true);\n                expect(numberCollection.has({})).toEqual(false);\n                expect(numberCollection.has([])).toEqual(false);\n            });\n            it('add', function () {\n                expect(numberCollection.add(61)).toEqual(true);\n                expect(numberCollection.add(5)).toEqual(false);\n                expect(numberCollection.unwrap()).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 61]);\n                expect(numberCollection.add(61)).toEqual(false);\n            });\n            it('addAt', function () {\n                expect(numberCollection.addAt(5, 1)).toEqual(true);\n                expect(numberCollection.unwrap()).toEqual([0, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n            });\n            it('remove', function () {\n                expect(numberCollection.remove(5)).toEqual(true);\n                expect(numberCollection.unwrap()).toEqual([0, 1, 2, 3, 4, 6, 7, 8, 9]);\n                expect(numberCollection.remove(5)).toEqual(false);\n            });\n            it('removeAt', function () {\n                expect(numberCollection.removeAt(3)).toEqual(3);\n                expect(numberCollection.removeAt(3)).toEqual(4);\n                expect(numberCollection.length()).toEqual(8);\n            });\n            it('pop', function () {\n                expect(numberCollection.pop()).toEqual(9);\n                expect(numberCollection.pop()).toEqual(8);\n                expect(numberCollection.length()).toEqual(8);\n            });\n            it('shift', function () {\n                expect(numberCollection.shift()).toEqual(0);\n                expect(numberCollection.shift()).toEqual(1);\n                expect(numberCollection.length()).toEqual(8);\n            });\n            it('indexOf', function () {\n                expect(numberCollection.indexOf(3)).toEqual(3);\n                expect(numberCollection.indexOf(7)).toEqual(7);\n            });\n            it('find', function () {\n                expect(numberCollection.find(function (ix, item) {\n                    return item === 10;\n                })).toEqual(void 0);\n                expect(numberCollection.find(function (ix, item) {\n                    return item === 7;\n                })).toEqual(7);\n            });\n            it('findLast', function () {\n                expect(_.Collection([12, 1, 2, 1, 104, 2, 1, 5, 55, 6, 2, 7]).findLast(function (item) {\n                    return item % 17 === 0;\n                })).toEqual(void 0);\n                expect(_.Collection([88, 2, 1, 5, 70, 23, 43, 9]).findLast(function (item) {\n                    return item % 2 === 0;\n                })).toEqual(70);\n            });\n            var firstFindObj = {\n                    one: 1,\n                    two: 2,\n                    three: 3\n                },\n                secondFindObj = {\n                    one: 3,\n                    two: 2,\n                    four: 4\n                };\n            it('findWhere', function () {\n                expect(_.Collection([firstFindObj, secondFindObj]).findWhere({\n                    one: 2\n                })).toEqual(void 0);\n                expect(_.Collection([firstFindObj, secondFindObj]).findWhere({\n                    two: 2\n                })).toEqual(firstFindObj);\n            });\n            it('findLastWhere', function () {\n                expect(_.Collection([firstFindObj, secondFindObj]).findLastWhere({\n                    one: 2\n                })).toEqual(void 0);\n                expect(_.Collection([firstFindObj, secondFindObj]).findLastWhere({\n                    two: 2\n                })).toEqual(secondFindObj);\n            });\n            it('posit', function () {\n                expect(numberCollection.posit(5)).toEqual(6);\n                expect(numberCollection.posit(11)).toEqual(0);\n            });\n            it('foldr', function () {\n                expect(numberCollection.foldr(function (memo, idx, item) {\n                    memo.push(item);\n                    return memo;\n                }, [])).toEqual([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n            });\n            it('foldl', function () {\n                expect(numberCollection.foldl(function (memo, idx, item) {\n                    memo.push(item);\n                    return memo;\n                }, [])).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n            });\n            it('merge', function () {\n                expect(numberCollection.merge([0, 1, 2, 6, 7, 8]).unwrap()).toEqual([0, 1, 2, 6, 7, 8, 6, 7, 8, 9]);\n            });\n            it('range', function () {\n                expect(_.Collection().range(4, 9).unwrap()).toEqual([4, 5, 6, 7, 8]);\n            });\n            it('eq', function () {\n                expect(numberCollection.eq(4).unwrap()).toEqual([4]);\n                expect(numberCollection.eq([3, 9]).unwrap()).toEqual([3, 9]);\n            });\n            it('map', function () {\n                expect(numberCollection.map(function (idx, item) {\n                    return item * 2;\n                }).unwrap()).toEqual([0, 2, 4, 6, 8, 10, 12, 14, 16, 18]);\n            });\n            it('filter', function () {\n                expect(numberCollection.filter(function (idx, item) {\n                    return item % 2;\n                }).unwrap()).toEqual([1, 3, 5, 7, 9]);\n            });\n            it('pluck', function () {\n                expect(_.Collection([{\n                    one: 1\n                }, {\n                    one: 2\n                }, {\n                    one: 3\n                }, {\n                    one: 4\n                }]).pluck('one').unwrap()).toEqual([1, 2, 3, 4]);\n            });\n            it('where', function () {\n                expect(_.Collection([{\n                    one: 1\n                }, {\n                    one: 2\n                }, {\n                    one: 1\n                }, {\n                    one: 4\n                }]).where({\n                    one: 1\n                }).unwrap()).toEqual([{\n                    one: 1\n                }, {\n                    one: 1\n                }]);\n            });\n            it('flatten', function () {\n                expect(_.Collection([\n                    [0, 1, 2, 3],\n                    [4, 5, 6, 7, 8],\n                    [9, 10, 11, 12]\n                ]).flatten().unwrap()).toEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n            });\n        });\n    });\n});","application.scope().run(function (app, _, factories, $) {\n    describe('Events', function () {\n        var blank, box,\n            Box = _.Box,\n            handler = function () {\n                return !0;\n            },\n            handler2 = function () {\n                return !1;\n            },\n            data = {\n                some: 'thing',\n                children: [{\n                    here: 'we',\n                    go: 'pause'\n                }, {\n                    one: 'more',\n                    time: 'pause'\n                }]\n            };\n        beforeEach(function () {\n            box = Box({\n                zero: 0,\n                one: 1,\n                two: 2,\n                three: 3,\n                four: 4,\n                five: 5,\n                six: 6,\n                seven: 7,\n                eight: 8,\n                nine: 9\n            });\n        });\n        describe('Boxes can have events', function () {\n            var box2;\n            describe('and can create events for itself', function () {\n                it('either one at a time', function () {\n                    box.on('evnt', handler);\n                    expect(box._events.evnt[0].handler()).toEqual(true);\n                });\n                it('or many at a time', function () {\n                    box.on('evnt eventer mikesevent', handler);\n                    expect(box._events.evnt[0].handler() && box._events.eventer[0].handler() && box._events.mikesevent[0].handler()).toEqual(true);\n                });\n                // it('or many against a list of functions', function () {\n                //     box.on('evnt eventer mikesevent', [handler, handler2]);\n                //     expect(box._events.evnt[0].handler === handler && box._events.evnt[1].handler === handler2).toEqual(true);\n                // });\n            });\n            describe('and can remove events from itself', function () {\n                it('either one at a time', function () {\n                    box.on('evnt', handler);\n                    expect(box._events.evnt[0].handler()).toEqual(true);\n                    box.off('evnt', handler);\n                    expect(box._events.evnt[0]).toEqual(void 0);\n                });\n                it('or many at a time', function () {\n                    box.on('evnt eventer mikesevent', handler);\n                    expect(box._events.evnt[0].handler === handler && box._events.eventer[0].handler === handler && box._events.mikesevent[0].handler === handler).toEqual(true);\n                    box.off('evnt eventer mikesevent', handler);\n                    expect(box._events.evnt[0] === void 0 && box._events.eventer[0] === void 0 && box._events.mikesevent[0] === void 0).toEqual(true);\n                });\n                // it('or many against a list of functions', function () {\n                //     box.on('evnt eventer mikesevent', [handler, handler2]);\n                //     expect(box._events.evnt[0].handler === handler && box._events.eventer[0].handler === handler && box._events.mikesevent[0].handler === handler && box._events.evnt[1].handler === handler2 && box._events.eventer[1].handler === handler2 && box._events.mikesevent[1].handler === handler2).toEqual(true);\n                //     box.off('evnt eventer mikesevent', [handler, handler2]);\n                //     expect(box._events.evnt[0] === void 0 && box._events.eventer[0] === void 0 && box._events.mikesevent[0] === void 0).toEqual(true);\n                // });\n            });\n        });\n        describe('Boxes can also listen to other, similar objects', function () {\n            var box2;\n            beforeEach(function () {\n                box2 = Box();\n            });\n            describe('by using the listenTo method', function () {\n                it('either one at a time', function () {\n                    box.listenTo(box2, 'evnt', handler);\n                    expect(box2._events.evnt[0].handler === handler).toEqual(true);\n                });\n                it('or many at a time', function () {\n                    box.listenTo(box2, 'evnt eventer mikesevent', handler);\n                    expect(box2._events.evnt[0].handler === handler && box2._events.eventer[0].handler === handler && box2._events.mikesevent[0].handler === handler).toEqual(true);\n                });\n                // it('or many against a list of functions', function () {\n                //     var listenObj;\n                //     box.listenTo(box2, 'evnt eventer mikesevent', [handler, handler2]);\n                //     expect(handler === box2._events.evnt[0].handler && handler === box2._events.eventer[0].handler && handler === box2._events.mikesevent[0].handler && handler2 === box2._events.evnt[1].handler && handler2 === box2._events.eventer[1].handler && handler2 === box2._events.mikesevent[1].handler).toEqual(true);\n                //     _.each(box._listeningTo, function (idx, listen) {\n                //         listenObj = listen;\n                //     });\n                //     expect(handler === listenObj.obj._events.evnt[0].handler && handler === listenObj.obj._events.eventer[0].handler && handler === listenObj.obj._events.mikesevent[0].handler && handler2 === listenObj.obj._events.evnt[1].handler && handler2 === listenObj.obj._events.eventer[1].handler && handler2 === listenObj.obj._events.mikesevent[1].handler).toEqual(true);\n                // });\n            });\n            describe('you can even take a shortcut and dispatch an event one at a time', function () {\n                it('using dispatch event', function () {\n                    var handle = 0,\n                        handler = function () {\n                            handle++;\n                        };\n                    box.on('handle', handler);\n                    box.dispatchEvent('handle');\n                    expect(handle).toEqual(1);\n                });\n            });\n            describe('and can stop listening by using the stopListening method', function () {\n                it('can remove events one at a time', function () {\n                    var listenObj;\n                    box.listenTo(box2, 'evnt', handler);\n                    expect(box2._events.evnt[0].handler === handler).toEqual(true);\n                    box.stopListening(box2, 'evnt', handler);\n                    _.each(box._listeningTo, function (idx, listen) {\n                        listenObj = listen;\n                    });\n                    expect(box2._events.evnt[0] === void 0 && listenObj === void 0).toEqual(true);\n                });\n                it('or many at a time', function () {\n                    var listenObj;\n                    box.listenTo(box2, 'evnt eventer mikesevent', handler);\n                    expect(box2._events.evnt[0].handler === handler && box2._events.eventer[0].handler === handler && box2._events.mikesevent[0].handler === handler).toEqual(true);\n                    box.stopListening(box2, 'evnt eventer mikesevent', handler);\n                    _.each(box._listeningTo, function (idx, listen) {\n                        listenObj = listen;\n                    });\n                    expect(box2._events.evnt[0] === void 0 && box2._events.eventer[0] === void 0 && box2._events.mikesevent[0] === void 0).toEqual(true);\n                });\n                // it('or many against a list of functions', function () {\n                //     var listenObj;\n                //     box.listenTo(box2, 'evnt eventer mikesevent', [handler, handler2]);\n                //     _.each(box._listeningTo, function (idx, listen) {\n                //         listenObj = listen;\n                //     });\n                //     expect(box2._events.evnt[0].handler === handler && box2._events.eventer[0].handler === handler && box2._events.mikesevent[0].handler === handler && box2._events.evnt[1].handler === handler2 && box2._events.eventer[1].handler === handler2 && box2._events.mikesevent[1].handler === handler2 && listenObj.obj._events.evnt[0].handler === handler && listenObj.obj._events.eventer[0].handler === handler && listenObj.obj._events.mikesevent[0].handler === handler && listenObj.obj._events.evnt[1].handler === handler2 && listenObj.obj._events.eventer[1].handler === handler2 && listenObj.obj._events.mikesevent[1].handler === handler2).toEqual(true);\n                //     box.stopListening(box2, 'evnt eventer mikesevent', [handler, handler2]);\n                //     expect(box2._events.evnt[0] === void 0 && box2._events.eventer[0] === void 0 && box2._events.mikesevent[0] === void 0 && box2._events.evnt[1] === void 0 && box2._events.eventer[1] === void 0 && box2._events.mikesevent[1] === void 0 && listenObj.obj._events.evnt[0] === void 0 && listenObj.obj._events.eventer[0] === void 0 && listenObj.obj._events.mikesevent[0] === void 0 && listenObj.obj._events.evnt[1] === void 0 && listenObj.obj._events.eventer[1] === void 0 && listenObj.obj._events.mikesevent[1] === void 0).toEqual(true);\n                // });\n            });\n        });\n    });\n});","application.scope().run(function (app, _, $) {\n    var factories = _.factories;\n    describe('Box', function () {\n        var blank, box,\n            Box = _.Box,\n            handler = function () {\n                return !0;\n            },\n            handler2 = function () {\n                return !1;\n            },\n            data = {\n                some: 'thing',\n                children: [{\n                    here: 'we',\n                    go: 'pause'\n                }, {\n                    one: 'more',\n                    time: 'pause'\n                }]\n            };\n        beforeEach(function () {\n            box = Box({\n                zero: 0,\n                one: 1,\n                two: 2,\n                three: 3,\n                four: 4,\n                five: 5,\n                six: 6,\n                seven: 7,\n                eight: 8,\n                nine: 9\n            });\n        });\n        it('extends from factories.Model', function () {\n            expect(_.isInstance(box, factories.Model)).toEqual(true);\n        });\n        describe('Boxes are always created with...', function () {\n            var box2 = Box();\n            it('a unique id', function () {\n                expect(_.has(box2, 'id')).toEqual(true);\n            });\n            it('a _previousAttributes hash', function () {\n                expect(_.has(box2, '_previousAttributes')).toEqual(true);\n                expect(_.isObject(box2._previousAttributes)).toEqual(true);\n                expect(_.isEmpty(box2._previousAttributes)).toEqual(true);\n            });\n            // it('a _byId hash', function () {\n            // \texpect(_.has(box2, '_byId')).toEqual(true);\n            // \texpect(_.isObject(box2._byId)).toEqual(true);\n            // });\n            it('a collection of children', function () {\n                expect(_.has(box2, 'children')).toEqual(true);\n                expect(_.isInstance(box2.children, factories.Collection)).toEqual(true);\n                expect(box2.children.length()).toEqual(0);\n            });\n            it('and an attributes object', function () {\n                expect(_.has(box2, 'attributes')).toEqual(true);\n                expect(_.isObject(box2.attributes)).toEqual(true);\n            });\n        });\n        describe('you can set properties on the box you\\'re handling with the set method', function () {\n            var box = Box(),\n                attrs = box.attributes;\n            beforeEach(function () {\n                box = Box({\n                    zero: 0,\n                    one: 1,\n                    two: 2,\n                    three: 3,\n                    four: 4,\n                    five: 5,\n                    six: 6,\n                    seven: 7,\n                    eight: 8,\n                    nine: 9\n                });\n            });\n            it('you can add new properties', function () {\n                expect(attrs.ten).toEqual(void 0);\n                box.set({\n                    ten: 10,\n                    eleven: 11,\n                    twelve: 12\n                });\n                // expect(_.has(box._previousAttributes, 'ten')).toEqual(true);\n                // expect(box._previousAttributes.one).toEqual(void 0);\n                expect(box.attributes.ten).toEqual(10);\n            });\n            it('you can modify existing properties', function () {\n                expect(box.attributes.one).toEqual(1);\n                box.set({\n                    one: 2,\n                    two: 3,\n                    three: 4\n                });\n                // expect(_.has(box._previousAttributes, 'one')).toEqual(true);\n                // expect(box._previousAttributes.one).toEqual(1);\n                expect(box.attributes.one).toEqual(2);\n            });\n            // it('modifying the attributes object can be done by passing in a variety of arguments, which are sequenced and extended onto the object', function () {\n            //     box.set('one', 5, {\n            //         three: 1,\n            //         four: 2,\n            //         five: 3\n            //     }, 'four', 4);\n            //     expect(box.attributes.one).toEqual(5);\n            //     expect(box.attributes.three).toEqual(1);\n            //     expect(box.attributes.four).toEqual(4);\n            //     expect(box.attributes.five).toEqual(3);\n            // });\n            it('and you can remove properties by using the unset method', function () {\n                var box = Box();\n                expect(box.attributes.one).toEqual(void 0);\n                box.set({\n                    one: 1\n                });\n                expect(box.attributes.one).toEqual(1);\n                box.unset('one');\n                expect(box.attributes.one).toEqual(void 0);\n            });\n            it('or remove a bunch of properties by passing in a space separated list to the unset method', function () {\n                expect(box.attributes.one).toEqual(1);\n                expect(box.attributes.three).toEqual(3);\n                expect(box.attributes.five).toEqual(5);\n                box.unset('one three five');\n                expect(box.attributes.one).toEqual(void 0);\n                expect(box.attributes.three).toEqual(void 0);\n                expect(box.attributes.five).toEqual(void 0);\n            });\n        });\n        // pass to the on, once, off, listenTo, listenToOnce, and stopListening functions\n        describe('there are super special characters that you can use for terseness', function () {\n            var count = 0,\n                handler = function () {\n                    count++;\n                };\n            beforeEach(function () {\n                box2 = Box();\n                count = 0;\n            });\n        });\n        describe('Boxes also trigger a variety of events any time the set method changes the attributes object', function () {\n            var fired;\n            beforeEach(function () {\n                fired = 0;\n            });\n            it('such as the digest event', function () {\n                box.on('digest', function () {\n                    fired = 1;\n                });\n                box.set({\n                    here: 'there'\n                });\n                expect(fired).toEqual(1);\n            });\n            it('and the alter event', function () {\n                box.on('change', function () {\n                    fired = 1;\n                });\n                box.set({\n                    one: 1,\n                    two: 2\n                });\n                expect(fired).toEqual(0);\n                box.set({\n                    two: 1\n                });\n                expect(fired).toEqual(1);\n            });\n            it('as well as alter events specific to each property', function () {\n                var obj = {\n                    one: 9,\n                    two: 8,\n                    three: 7\n                };\n                box.on('change:one change:two change:three', function () {\n                    fired++;\n                });\n                box.set(obj);\n                expect(_.keys(obj).length).toEqual(fired);\n            });\n        });\n        describe('but beyond events and simple hashes, Boxes are able to manage themselves fairly well', function () {\n            var data = {\n                some: 'thing',\n                children: [{\n                    here: 'we',\n                    go: 'pause'\n                }, {\n                    one: 'more',\n                    time: 'pause'\n                }]\n            };\n            it('they can get properties from the attributes object with the get method', function () {\n                expect(box.get('one')).toEqual(1);\n            });\n            it('they can tell you if it has a property with the has method', function () {\n                expect(box.has('one')).toEqual(true);\n            });\n            it('they can clone it\\'s attributes by using the toJSON method', function () {\n                var clone = box.toJSON();\n                expect(clone).toEqual(box.attributes);\n                expect(clone === box.attributes).toEqual(false);\n            });\n            it('they can clone children into an array', function () {\n                var clone;\n                box.add([_.Box(), _.Box()]);\n                clone = box.children.toJSON();\n                expect(clone).toEqual([{}, {}]);\n            });\n            it('they can even clone their deep, underlying structure', function () {\n                box = _.Box(data);\n                expect(box.treeToJSON()).toEqual(data);\n            });\n            it('they can stringify themselves', function () {\n                box = _.Box({\n                    some: 'thing'\n                });\n                expect(box.toString()).toEqual(JSON.stringify({\n                    some: 'thing'\n                }));\n            });\n            it('they can stringify their children', function () {\n                box = _.Box();\n                box.add(data.children);\n                expect(box.children.toString()).toEqual(JSON.stringify(data.children));\n            });\n            // it('they can stringify themselves as a tree structure', function () {\n            //     box = _.Box(data);\n            //     expect(box.stringifyTree()).toEqual(JSON.stringify(data));\n            // });\n            // it('they can stringify themselves as a tree structure', function () {\n            //     box = _.Box(data);\n            //     expect(box.stringifyTree()).toEqual(JSON.stringify(data));\n            // });\n        });\n        describe('Boxes can register other objects against a key hash as well', function () {\n            it('it can register', function () {\n                box.children.register('registering', {\n                    myObj: 1\n                });\n                expect(box.children._byId.registering.myObj).toEqual(1);\n            });\n            it('and retreive information', function () {\n                var data = {\n                    myObj: 1\n                };\n                box.children.register('registering', data);\n                expect(box.children.get('registering')).toEqual(data);\n                expect(box.children.get('registering') === data).toEqual(true);\n            });\n        });\n        describe('As you may have noticed, boxes', function () {\n            describe('can have children', function () {\n                it('you can add one at a time', function () {\n                    box.add({\n                        isChild: !0\n                    });\n                    expect(box.children.length()).toEqual(1);\n                });\n                it('or many at once', function () {\n                    box.add([{\n                        isChild: !0\n                    }, {\n                        isChild: 'maybe'\n                    }]);\n                    expect(box.children.length()).toEqual(2);\n                });\n                it('you can also remove them', function () {\n                    box = _.Box();\n                    box.add(data.children);\n                    expect(box.children.length()).toEqual(2);\n                });\n                it('or many at the same time', function () {\n                    box = _.Box();\n                    box.add([{\n                        one: 1\n                    }, {\n                        one: 2\n                    }, {\n                        one: 3\n                    }, {\n                        one: 4\n                    }]);\n                    var children = box.children;\n                    expect(children.length()).toEqual(4);\n                    box.remove([children.index(1), children.index(3)]);\n                    expect(children.length()).toEqual(2);\n                });\n            });\n            describe('they can', function () {\n                it('destroy themselves', function () {\n                    box = _.Box();\n                    box.add([{\n                        one: 1\n                    }, {\n                        one: 2\n                    }, {\n                        one: 3\n                    }, {\n                        one: 4\n                    }]);\n                    var destroyer = box.children.index(2);\n                    expect(box.children.get(destroyer.cid) === destroyer).toEqual(true);\n                    expect(box.children.get(destroyer.id) === destroyer).toEqual(true);\n                    destroyer.destroy();\n                    expect(box.children.get(destroyer.cid)).toEqual(void 0);\n                    expect(box.children.get(destroyer.id)).toEqual(void 0);\n                });\n                it('sort their children', function () {\n                    box.add([{\n                        one: 1,\n                        two: 2,\n                        three: 3\n                    }, {\n                        one: 2,\n                        two: 1,\n                        three: 3\n                    }, {\n                        one: 3,\n                        two: 8,\n                        three: 9\n                    }]);\n                    box.comparator = 'two';\n                    box.sort();\n                    expect(box.children.map(function (model) {\n                        return model.get('two');\n                    }).unwrap()).toEqual([1, 2, 8]);\n                    box.comparator = '!two';\n                    box.sort();\n                    expect(box.children.map(function (model) {\n                        return model.get('two');\n                    }).unwrap()).toEqual([8, 2, 1]);\n                });\n                it('set up events on their children', function () {\n                    var counter = 0;\n                    box.childEvents = {\n                        beep: function () {\n                            counter++;\n                            counter += (this === box);\n                        },\n                        boop: function () {\n                            counter--;\n                        }\n                    };\n                    box.add([{}, {}, {}, {}]);\n                    box.children.duff(function (model) {\n                        model.dispatchEvent('beep');\n                    });\n                    expect(counter).toEqual(8);\n                    box.children.duff(function (model) {\n                        model.dispatchEvent('boop');\n                    });\n                    expect(counter).toEqual(4);\n                });\n                it('set up events on their parents', function () {\n                    var count = 0;\n                    Box.constructor.prototype.parentEvents = {\n                        beep: function () {\n                            count++;\n                        }\n                    };\n                    box.add([{}, {}, {}, {}]);\n                    box.dispatchEvent('beep');\n                    expect(count).toEqual(4);\n                    Box.constructor.prototype.parentEvents = blank;\n                });\n            });\n        });\n        describe('boxes can remove themselves', function () {\n            it('if they are alone, only their events will be removed', function () {\n                box.on({\n                    event1: function () {},\n                    event2: function () {}\n                });\n                expect(box._events.event1.length).toEqual(1);\n                box.destroy();\n                expect(box._events.event1.length).toEqual(0);\n            });\n            it('if they are listening to something then those listeners will also be removed', function () {\n                var box2 = _.Box(),\n                    events = {};\n                box.listenTo(box2, {\n                    event1: function () {},\n                    event2: function () {}\n                });\n                expect(box2._events.event1.length).toEqual(1);\n                expect(_.keys(box._listeningTo).length).toEqual(1);\n                box2.destroy();\n                expect(box2._events.event1.length).toEqual(0);\n                _.each(box._listeningTo, function (val, key) {\n                    if (!_.isBlank(val)) {\n                        events[key] = val;\n                    }\n                });\n                expect(_.keys(events).length).toEqual(0);\n            });\n            it('conversely, if the box has listening objects, it will remove it\\'s handlers from other objects', function () {\n                var box2 = _.Box(),\n                    events = {};\n                box.listenTo(box2, {\n                    event1: function () {},\n                    event2: function () {}\n                });\n                expect(box2._events.event1.length).toEqual(1);\n                expect(_.keys(box._listeningTo).length).toEqual(1);\n                box.destroy();\n                // check to make sure all of the _events are being removed and\n                // all of the ties to everything else is being cleaned up\n                expect(box2._events.event1.length).toEqual(0);\n                _.each(box._listeningTo, function (val, key) {\n                    if (!_.isBlank(val)) {\n                        events[key] = val;\n                    }\n                });\n                expect(_.keys(events).length).toEqual(0);\n            });\n        });\n    });\n});","application.scope().run(function (app, _, factories, $) {\n    describe('Promise', function () {\n        var madeit, promise;\n        beforeEach(function () {\n            madeit = 0;\n            promise = _.Promise();\n        });\n        it('allows for async resolution of state', function () {\n            expect(_.isObject(promise)).toEqual(true);\n            promise.always(function (e) {\n                madeit++;\n            });\n            // test for premature trigger\n            expect(madeit).toEqual(0);\n            // make sure promise is an object\n            expect(_.isObject(promise)).toEqual(true);\n            // make sure it has the right \"state\"\n            expect(promise.state()).toEqual('pending');\n            // resolve the promise\n            promise.resolve();\n            // make sure that it hit the function once and only once\n            expect(madeit).toEqual(1);\n            // make sure it has the correct state after resolution\n            expect(promise.state()).toEqual('success');\n        });\n        it('can tell you if it has resolved or not', function () {\n            expect(promise.resolved()).toEqual(false);\n            promise.resolve();\n            expect(promise.resolved()).toEqual(true);\n        });\n        describe('can tell you what state it is in such as', function () {\n            it('pending', function () {\n                expect(promise.state()).toEqual('pending');\n            });\n            it('success', function () {\n                promise.resolve();\n                expect(promise.state()).toEqual('success');\n            });\n            it('failure', function () {\n                promise.reject();\n                expect(promise.state()).toEqual('failure');\n            });\n        });\n        describe('or it can give you a boolean value for resolutions like', function () {\n            it('pending', function () {\n                expect(promise.isPending()).toEqual(true);\n            });\n            it('success', function () {\n                promise.resolve();\n                expect(promise.isFulfilled()).toEqual(true);\n            });\n            it('failure', function () {\n                promise.reject();\n                expect(promise.isRejected()).toEqual(true);\n            });\n        });\n        describe('can resolve to different states such as', function () {\n            it('success', function (done) {\n                // attach handler\n                promise.success(function () {\n                    madeit++;\n                });\n                setTimeout(function () {\n                    // resolve promise for success\n                    promise.resolve();\n                    // expect madeit to increase\n                    expect(madeit).toEqual(1);\n                    // let jasmine know we're all good\n                    done();\n                }, 100);\n            });\n            it('failure', function (done) {\n                // attach failure handler\n                promise.failure(function () {\n                    madeit++;\n                });\n                setTimeout(function () {\n                    // resolve promise for failure\n                    promise.reject();\n                    // expect madeit to increase\n                    expect(madeit).toEqual(1);\n                    // let jasmine know we're all good\n                    done();\n                }, 100);\n            });\n        });\n        describe('but it also can trigger functions on any resolution with the always method such as', function () {\n            it('resolve', function (done) {\n                // attach always handler\n                promise.always(function () {\n                    madeit++;\n                });\n                setTimeout(function () {\n                    // resolve promise for failure\n                    promise.resolve();\n                    // expect madeit to increase\n                    expect(madeit).toEqual(1);\n                    // let jasmine know we're all good\n                    done();\n                }, 100);\n            });\n            it('reject', function (done) {\n                // attach always handler\n                promise.always(function () {\n                    madeit++;\n                });\n                setTimeout(function () {\n                    // reject promise\n                    promise.reject();\n                    // expect madeit to increase\n                    expect(madeit).toEqual(1);\n                    // let jasmine know we're all good\n                    done();\n                }, 100);\n            });\n        });\n    });\n});","application.scope().run(function (app, _, factories, $) {\n    describe('Ajax', function () {\n        //\n    });\n});","application.scope().run(function (app, _, $) {\n    var factories = _.factories;\n    var registry = _.associator;\n    describe('Registry', function () {\n        beforeEach(function () {});\n        it('is made by the specless object', function () {\n            expect(_.isInstance(registry, factories.Associator)).toEqual(true);\n        });\n        it('is not a collection', function () {\n            expect(_.isInstance(registry, factories.Collection)).toEqual(false);\n        });\n        it('can get any object\\'s data', function () {\n            expect(registry.get(window)).toEqual({\n                dataset: {}\n            });\n        });\n        it('can save data against pointers', function () {\n            registry.set(window, {\n                some: 'data'\n            });\n            expect(registry.get(window)).toEqual({\n                dataset: {},\n                some: 'data'\n            });\n        });\n        it('can also get any group of data that the same type', function () {\n            var one = {},\n                two = {};\n            registry.set(one, {\n                one: 1\n            });\n            registry.set(two, {\n                two: 2\n            });\n            expect(registry.sameType(two)).toEqual({\n                data: [{\n                    dataset: {},\n                    one: 1\n                }, {\n                    dataset: {},\n                    two: 2\n                }],\n                items: [one, two],\n                readData: 1\n            });\n        });\n    });\n});","application.scope().run(function (app, _, $) {\n    var factories = _.factories,\n        elementData = _.elementData;\n    describe('DOMM', function () {\n        var divs, $empty = $(),\n            $win = $(window),\n            $doc = $(document),\n            $body = $(document.body),\n            handler = function () {\n                return true;\n            },\n            handler2 = function () {\n                return false;\n            },\n            create = function () {\n                $con.remove(divs);\n                divs = $().count(0, 5, function (item, index, list) {\n                    var div = document.createElement('div');\n                    div.className = 'one';\n                    if (index % 2) {\n                        div.className += ' two';\n                    } else {\n                        div.className += ' not';\n                    }\n                    list.push(div);\n                });\n                $con.append(divs);\n                return divs;\n            },\n            $con = _.makeEl('div').style({\n                height: '100%',\n                width: '100%'\n            });\n        $(document.body).append($con);\n        beforeEach(create);\n        it('is essentially a collection', function () {\n            expect(_.isInstance($empty, factories.DOMM)).toEqual(true);\n            expect(_.isInstance($empty, factories.Collection)).toEqual(true);\n        });\n        describe('except it has some methods that are highly pertinant to DOM manipulation... ergo: DOMM', function () {\n            it('can check if its items are windows', function () {\n                expect($win.isWin()).toEqual(true);\n                expect($doc.isWin()).toEqual(false);\n                expect($body.isWin()).toEqual(false);\n            });\n            it('can check if its items are documents', function () {\n                expect($win.isDoc()).toEqual(false);\n                expect($doc.isDoc()).toEqual(true);\n                expect($body.isDoc()).toEqual(false);\n            });\n            it('can check if its items are actually elements', function () {\n                expect($win.allDom()).toEqual(false);\n                expect($doc.allDom()).toEqual(false);\n                expect($body.allDom()).toEqual(true);\n                expect($('a').allDom()).toEqual(true);\n            });\n            it('can check if its items are document fragments', function () {\n                var frag = document.createDocumentFragment();\n                frag.appendChild(document.createElement('div'));\n                expect($win.isFrag()).toEqual(false);\n                expect($doc.isFrag()).toEqual(false);\n                expect($body.isFrag()).toEqual(false);\n                expect($('a').isFrag()).toEqual(false);\n                expect($(frag).isFrag()).toEqual(true);\n            });\n        });\n        describe('it can filter itself', function () {\n            it('by query string matching', function () {\n                var newDivs = divs.filter('.two');\n                expect(newDivs.length()).toEqual(2);\n            });\n            it('by filtering against a function', function () {\n                var newDivs = divs.filter(function (item, idx) {\n                    return !((idx % 3) - 1);\n                });\n                expect(newDivs.length()).toEqual(2);\n                expect(newDivs.get()).toEqual(divs.get(1));\n                expect(newDivs.get(1)).toEqual(divs.get(4));\n            });\n            it('by passing in an object', function () {\n                var newDivs = divs.filter({\n                    className: 'one not'\n                });\n                expect(newDivs.length()).toEqual(3);\n            });\n            // it('can also simply get an element or a bunch of elements through eq', function () {\n            // \tvar div = divs.eq(3);\n            // \tvar dun = divs.unwrap();\n            // \texpect(div.get()).toEqual(dun[3]);\n            // \tvar divz = divs.eq([1, 3, 4]);\n            // \texpect(divz.get()).toEqual(dun[1]);\n            // \texpect(divz.get(1)).toEqual(dun[3]);\n            // \texpect(divz.get(2)).toEqual(dun[4]);\n            // });\n            it('can also get the first', function () {\n                expect(divs.first().get()).toEqual(divs.get());\n            });\n            it('and the last element in the list', function () {\n                expect(divs.last().get()).toEqual(divs.get(divs.length() - 1));\n            });\n        });\n        describe('it can find it\\'s children', function () {\n            it('by calling the children method', function () {\n                divs.duff(function (div, idx) {\n                    var span1 = document.createElement('span');\n                    var span2 = document.createElement('span');\n                    span1.className = 'span-' + idx;\n                    span2.className = 'span-' + (idx * 2);\n                    div.appendChild(span1);\n                    div.appendChild(span2);\n                });\n                var kids = divs.children();\n                expect(kids.length()).toEqual(10);\n                kids.duff(function (kid, idx) {\n                    expect(kid.localName).toEqual('span');\n                });\n                kids = divs.children(1);\n                expect(kids.length()).toEqual(5);\n                kids = divs.children('.span-2');\n                expect(kids.unwrap()).toEqual(divs.children().filter('.span-2').unwrap());\n                expect(kids.length()).toEqual(2);\n                expect(kids.index() === kids.index(1)).toEqual(false);\n            });\n            it('by querying the dom elements', function () {\n                divs.duff(function (div, idx) {\n                    div.innerHTML = '<span></span><img/>';\n                });\n                var kids = divs.find('img');\n                expect(kids.length()).toEqual(5);\n                kids.duff(function (kid, idx) {\n                    expect(kid.tagName).toEqual('IMG');\n                });\n            });\n        });\n        describe('it can also find it\\'s parents', function () {\n            it('either by counting up', function () {\n                var $start = $('.results .failures'),\n                    $end = $('.jasmine_html-reporter'),\n                    end = $start.parent(2);\n                expect(end.index()).toEqual($end.index());\n            });\n            it('or by finding via selector', function () {\n                var $start = $('.results .failures'),\n                    $end = $('.jasmine_html-reporter'),\n                    end = $start.parent('.jasmine_html-reporter');\n                expect(end.index()).toEqual($end.index());\n            });\n            it('or by passing a function', function () {\n                var $start = $('.results .failures'),\n                    end = $start.parent(function (el) {\n                        return el.tagName === 'BODY';\n                    });\n                expect(end.index()).toEqual(document.body);\n            });\n            describe('or by passing a keyword', function () {\n                it('like document', function () {\n                    var $start = $('.results .failures'),\n                        end = $start.parent('document');\n                    expect(end.index()).toEqual(document);\n                });\n                it('or window', function () {\n                    var $start = $('.results .failures'),\n                        end = $start.parent('window');\n                    expect(end.index()).toEqual(window);\n                });\n            });\n        });\n        describe('all of this traversing can be undone', function () {\n            it('with the end method', function () {\n                var $start = $('.results .failures');\n                var $next = $start.parent();\n                $next = $next.children();\n                $next = $next.end();\n                expect($next === $start).toEqual(true);\n            });\n        });\n        describe('the domm is also special because it abstracts event listeners for you', function () {\n            describe('can add handlers', function () {\n                it('one at a time', function () {\n                    divs.on('click', handler).duff(function (div, idx) {\n                        var data = elementData.get(div);\n                        expect(data.events['false'].click[0].fn === handler).toEqual(true);\n                    });\n                });\n                it('many at a time', function () {\n                    divs.on('click mouseover mouseout', handler).duff(function (div, idx) {\n                        var data = elementData.get(div);\n                        _.each(data.handlers, function (_handler, key) {\n                            var split = key.split(':');\n                            _.duff(data.events[split[0]][split[1]], function (fn, idx) {\n                                expect(fn.fn === handler).toEqual(true);\n                            });\n                        });\n                    });\n                });\n            });\n        });\n        describe('the domm is also special because it abstracts event listeners for you', function () {\n            describe('can add handlers', function () {\n                it('one at a time', function () {\n                    divs.on('click', handler).duff(function (div, idx) {\n                        var data = elementData.get(div);\n                        expect(data.events['false'].click[0].fn === handler).toEqual(true);\n                    });\n                });\n                it('many at a time', function () {\n                    divs.on('click mouseover mouseout', handler).duff(function (div, idx) {\n                        var data = elementData.get(div);\n                        _.each(data.handlers, function (_handler, key) {\n                            var split = key.split(':');\n                            expect(split[0]).toEqual('false');\n                            _.duff(data.events[split[0]][split[1]], function (fn, idx) {\n                                expect(fn.fn === handler).toEqual(true);\n                            });\n                        });\n                    });\n                });\n            });\n            describe('also capture handlers', function () {\n                it('one at a time', function () {\n                    divs.on('_click', handler).duff(function (div, idx) {\n                        var data = elementData.get(div);\n                        expect(data.events['true'].click[0].fn === handler).toEqual(true);\n                    });\n                });\n                it('many at a time', function () {\n                    divs.on('_click _mouseover _mouseout', handler).duff(function (div, idx) {\n                        var data = elementData.get(div);\n                        _.each(data.handlers, function (_handler, key) {\n                            var split = key.split(':');\n                            expect(split[0]).toEqual('true');\n                            _.duff(data.events[split[0]][split[1]], function (fn, idx) {\n                                expect(fn.fn === handler).toEqual(true);\n                            });\n                        });\n                    });\n                });\n            });\n            it('will only add a method to the queue once. if a duplicate is passed in, it will be ignored (just like the browser implementation)', function () {\n                divs.on('click', handler).on('click', handler).duff(function (div, idx) {\n                    var data = elementData.get(div);\n                    expect(data.events['false'].click[1]).toEqual(void 0);\n                });\n            });\n            it('once wrappers can also be used with the once method and they can be added the same way as once', function () {\n                var isDone = 0,\n                    handler = function () {\n                        isDone--;\n                    };\n                divs.once('click', handler);\n                $(document.body).append(divs);\n                divs.duff(function (div, idx) {\n                    isDone++;\n                    var data = elementData.get(div);\n                    expect(_.isFunction(data.events['false'].click[0].fn)).toEqual(true);\n                    $(div).click();\n                    data = elementData.get(div);\n                    expect(data.events['false'].click[0]).toEqual(void 0);\n                });\n                divs.remove();\n            });\n            it('be careful with the once function because they can be added multiple times to the queue, since they use a proxy function, like the one available at _.once', function () {\n                divs.once('click', handler).once('click', handler).duff(function (div, idx) {\n                    var data = elementData.get(div);\n                    expect(_.isFunction(data.events['false'].click[1].fn)).toEqual(true);\n                });\n            });\n        });\n        describe('the each function is special because', function () {\n            it('it wraps each element in a DOMM object before passing it through your iterator', function () {\n                divs.each(function (el, idx) {\n                    expect(_.isInstance(el, _.DOMM)).toEqual(true);\n                    expect(el.length()).toEqual(1);\n                    expect(divs.index(idx) === el.index());\n                });\n            });\n            it('where the duff and forEach function just gives you the element at each index, just like a collection', function () {\n                divs.duff(function (el, idx) {\n                    expect(_.isInstance(el, _.DOMM)).toEqual(false);\n                });\n                divs.forEach(function (el, idx) {\n                    expect(_.isInstance(el, _.DOMM)).toEqual(false);\n                });\n            });\n        });\n        describe('adding and removing classes is done by string checking instead of the classList to invoke only one reflow', function () {\n            it('you can use addClass', function () {\n                divs.each(function (div, idx) {\n                    expect(div.hasClass('three')).toEqual(false);\n                });\n                divs.addClass('three');\n                divs.each(function (div, idx) {\n                    expect(div.hasClass('three')).toEqual(true);\n                });\n            });\n            it('you can use removeClass', function () {\n                divs.each(function (div, idx) {\n                    expect(div.hasClass('three')).toEqual(false);\n                });\n                expect(divs.hasClass('three')).toEqual(false);\n                divs.addClass('three');\n                expect(divs.hasClass('three')).toEqual(true);\n            });\n            it('you can use hasClass to check if all of the elements has a particular class', function () {\n                expect(divs.hasClass('two')).toEqual(false);\n                expect(divs.hasClass('one')).toEqual(true);\n            });\n            it('you can use toggleClass swap classes depending on whether or not they exist on each element', function () {\n                divs.each(function (div, idx) {\n                    expect(div.hasClass('one')).toEqual(true);\n                });\n                divs.toggleClass('one');\n                divs.each(function (div, idx) {\n                    expect(div.hasClass('one')).toEqual(false);\n                });\n            });\n            it('it will also do this for individual elements', function () {\n                var list = [],\n                    unique = [];\n                divs.each(function (div, idx) {\n                    var res = div.hasClass('two');\n                    list.push(res);\n                    _.add(unique, res);\n                });\n                divs.toggleClass('two');\n                divs.each(function (div, idx) {\n                    expect(div.hasClass('two')).toEqual(!list[idx]);\n                });\n                expect(unique.length > 1).toEqual(true);\n            });\n            it('you can also use changeClass as a shorthand of removeClass and addClass', function () {\n                divs.changeClass('one not two', 'three');\n                divs.each(function (div, idx) {\n                    expect(div.hasClass('one')).toEqual(false);\n                    expect(div.hasClass('two')).toEqual(false);\n                    expect(div.hasClass('not')).toEqual(false);\n                    expect(div.hasClass('three')).toEqual(true);\n                });\n            });\n        });\n        describe('there is also a data attributes interface', function () {\n            it('where you can add', function () {\n                divs.duff(function (div, idx) {\n                    expect(div.getAttribute('data-one')).toEqual(null);\n                    expect(div.getAttribute('data-two')).toEqual(null);\n                });\n                divs.data({\n                    one: 'one',\n                    two: 'two'\n                });\n                divs.duff(function (div, idx) {\n                    expect(div.getAttribute('data-one')).toEqual('one');\n                    expect(div.getAttribute('data-two')).toEqual('two');\n                });\n            });\n            it('remove', function () {\n                divs.data({\n                    one: 'one',\n                    two: 'two'\n                });\n                divs.duff(function (div, idx) {\n                    expect(div.getAttribute('data-one')).toEqual('one');\n                    expect(div.getAttribute('data-two')).toEqual('two');\n                });\n                divs.data({\n                    one: false,\n                    two: false\n                });\n                divs.duff(function (div, idx) {\n                    expect(div.getAttribute('data-one')).toEqual(null);\n                    expect(div.getAttribute('data-two')).toEqual(null);\n                });\n            });\n            it('and update data attributes', function () {\n                divs.data({\n                    one: 'one',\n                    two: 'two'\n                });\n                divs.duff(function (div, idx) {\n                    expect(div.getAttribute('data-one')).toEqual('one');\n                    expect(div.getAttribute('data-two')).toEqual('two');\n                });\n                divs.data({\n                    one: {\n                        some: 'one'\n                    },\n                    two: {\n                        to: 'love'\n                    }\n                });\n                divs.each(function (div, idx) {\n                    expect(div.data('one')).toEqual({\n                        some: 'one'\n                    });\n                    expect(div.data('two')).toEqual({\n                        to: 'love'\n                    });\n                });\n            });\n        });\n        describe('it can also manipulate elements in other ways', function () {\n            it('like by manipulating their attributes', function () {\n                divs.duff(function (div, idx) {\n                    expect(div.getAttribute('tabindex')).toEqual(null);\n                });\n                divs.attr({\n                    tabindex: -1\n                });\n                divs.each(function (div, idx) {\n                    expect(div.attr('tabindex')).toEqual(-1);\n                });\n            });\n            it('or by manipulating their properties', function () {\n                divs.duff(function (div, idx) {\n                    expect(div.align).toEqual('');\n                });\n                divs.prop({\n                    align: 'left'\n                });\n                divs.each(function (div, idx) {\n                    expect(div.prop('align')).toEqual('left');\n                });\n            });\n        });\n        it('it knows it\\'s own client rect', function () {\n            var div = divs.eq(0);\n            expect(div.clientRect()).toEqual(_.extend({}, div.index().getBoundingClientRect()));\n        });\n        it('can show and hide elements', function () {\n            expect(divs.hide().map(function (el) {\n                if (el.style.display === 'none') {\n                    return '';\n                } else {\n                    return el.style.display;\n                }\n            }).join('')).toEqual('');\n            expect(divs.show().map(function (el) {\n                if (el.style.display === 'block') {\n                    return '';\n                } else {\n                    return el.style.display;\n                }\n            }).join('')).toEqual('');\n        });\n        it('can attach dom elements', function () {\n            var div = divs.eq();\n            div.append(divs.index(1));\n            expect(div.children().index()).toEqual(divs.index(1));\n        });\n        it('can remove dom elements', function () {\n            var div = divs.eq();\n            div.append(divs.index(1));\n            expect(div.children().index()).toEqual(divs.index(1));\n            div.children().remove();\n            expect(div.children().length()).toEqual(0);\n        });\n    });\n});","// Specless.run(function (specless, _, extendFrom, factories, $) {\n//     describe('View', function () {\n//         var blank, view, $con,\n//             ExtendedView = extendFrom.View({\n//                 hovered: function () {},\n//                 events: {\n//                     'event1': function () {}\n//                 },\n//                 elementEvents: {\n//                     click: function () {\n//                         clicked = 1;\n//                     },\n//                     mouseover: 'hovered'\n//                 }\n//             }),\n//             create = function () {\n//                 clicked = blank;\n//                 $con = _.makeEl('div').attr({\n//                     id: 'view-test'\n//                 });\n//                 view = new ExtendedView($con);\n//                 $(document.body).append($con);\n//             },\n//             duff = _.duff;\n//         beforeEach(create);\n//         afterEach(function () {\n//             $con.remove();\n//         });\n//         it('has a domm element associated with it', function () {\n//             expect(_.is(view.el, _.DOMM)).toEqual(true);\n//         });\n//         it('even if there\\'s no element', function () {\n//             var view = _.View();\n//             expect(_.is(view.el, _.DOMM)).toEqual(true);\n//             expect(view.el.length()).toEqual(0);\n//         });\n//         describe('to define an element to be associated with it, pass it one', function () {\n//             it('either through the domm wrapper', function () {\n//                 var view = _.View($('body'));\n//                 expect(view.el.length()).toEqual(1);\n//             });\n//             it('or as a regular dom node', function () {\n//                 var view = _.View(document.body);\n//                 expect(view.el.length()).toEqual(1);\n//             });\n//         });\n//         it('views are most helpful as a building block', function () {\n//             var extended = extendFrom.View({});\n//             expect(extended === factories.View).toEqual(false);\n//             expect(new extended() instanceof factories.View).toEqual(true);\n//         });\n//         describe('views add events to elements from an object called elementEvents', function () {\n//             it('by default, none are added', function () {\n//                 var view = _.View(_.makeEl('div'));\n//                 var data = _.associator.get(view.el.get());\n//                 expect(data.events).toEqual(void 0);\n//             });\n//             it('but a quick change to a new constructor\\'s prototype will result in an opulence of event handlers', function () {\n//                 var data = _.associator.get(view.el.get());\n//                 expect(data.events).not.toEqual(blank);\n//                 expect(clicked).toEqual(blank);\n//                 view.el.click();\n//                 expect(clicked).toEqual(1);\n//             });\n//             it('preparses the event list, and generates a namespace, so it can take the handlers off later', function () {\n//                 var data = _.associator.get(view.el.get());\n//                 duff(data.events['false'].click, function (handler) {\n//                     expect(handler.namespace.indexOf('delegateEvents')).not.toEqual(-1);\n//                 });\n//             });\n//             it('can also take handlers off', function () {\n//                 var handler = function () {},\n//                     data = _.associator.get(view.el.get()),\n//                     clicks = data.events['false'].click;\n//                 view.undelegateEvents();\n//                 expect(clicks.length).toEqual(0);\n//                 view.delegate('click', handler);\n//                 expect(clicks.length).toEqual(1);\n//                 view.undelegateEvents();\n//                 expect(clicks.length).toEqual(0);\n//             });\n//             it('will not take off handlers that it did not delegate with it\\'s own namespace', function () {\n//                 var handler = function () {},\n//                     data = _.associator.get(view.el.get()),\n//                     clicks = data.events['false'].click;\n//                 view.undelegateEvents();\n//                 expect(clicks.length).toEqual(0);\n//                 view.el.on('click', handler);\n//                 expect(clicks.length).toEqual(1);\n//                 view.undelegateEvents();\n//                 // will not take handlers off it it did not put it on\n//                 expect(clicks.length).toEqual(1);\n//                 expect(clicks[0].fn === handler).toEqual(true);\n//             });\n//         });\n//         describe('it can also add delegated events for ui elements', function () {\n//             it('every view has a ui hash', function () {\n//                 expect(_.has(view, 'ui')).toEqual(true);\n//             });\n//             it('by default, it\\'s empty', function () {\n//                 expect(view.ui).toEqual({});\n//             });\n//             it('but it can be filled with ui DOMM references', function () {\n//                 var Extendor = extendFrom.View({\n//                     ui: {\n//                         list: 'ul',\n//                         items: 'li'\n//                     }\n//                 });\n//                 var extendor = new Extendor(_.makeEl('div').append(_.makeEl('ul').append(_.makeEl('li'))));\n//                 _.each(extendor.ui, function (domm, key) {\n//                     expect(_.is(domm, _.DOMM)).toEqual(true);\n//                 });\n//             });\n//         });\n//         it('the View object also has a relative $ implementation to allow you to find with the $ as the top most element, and only look down', function () {\n//             var li = _.makeEl('li');\n//             var div = _.makeEl('div').append(_.makeEl('ul').append(li));\n//             $(document.body).append(div);\n//             var view = _.View(div);\n//             expect(view.$('li').get() === li.get()).toEqual(true);\n//             view.destroy();\n//         });\n//         it('can also destroy itself', function () {\n//             var count = 0;\n//             $(document.body).append(view.el);\n//             view.on('cleeek', function () {});\n//             _.each(view._events, function (arr) {\n//                 count += arr.length;\n//             });\n//             expect(count).not.toEqual(0);\n//             view.destroy();\n//             count = 0;\n//             expect(view.el.parent().length()).toEqual(0);\n//             _.each(view._events, function (arr, id) {\n//                 count += arr.length;\n//             });\n//             expect(count).toEqual(0);\n//         });\n//     });\n// });","application.scope().run(function (app, _, factories, $) {\n    describe('Buster', function () {\n        //\n    });\n});"],"sourceRoot":"/source/"}